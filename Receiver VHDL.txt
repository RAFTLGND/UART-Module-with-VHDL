library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity R_UART is
    generic(
        CLK_FRQ  : integer := 100000; 
        BAUD_RATE: integer := 9600;      
        STOP_BIT : integer := 1             
    );
    port(
        CLK2     : in std_logic;            
        Rx_in    : in std_logic; 
        Rx_active: in std_logic;
        Rout_DATA: out std_logic_vector(7 downto 0);      
        Rx_busy  : out std_logic            
    );
end R_UART;

architecture HAS of R_UART is
    constant BIT_TIMER : integer := CLK_FRQ / BAUD_RATE; 
    constant HALF_TIMER: integer := BIT_TIMER/2;
    signal R_active : std_logic;
    type Rx_STATE is (SLEEP, START, Rx_DATA, STOP);
    signal state : Rx_STATE := SLEEP; 
    signal S_DATA : std_logic_vector(7 downto 0);
    signal time_counter : integer := 0; 
    signal bit_counter  : integer := 0; 
 begin
  process(CLK2)
  begin
  R_active <= Rx_active;
  if rising_edge(CLK2) then
    case state is
   when SLEEP =>
          time_counter <= 0;
   if (R_active = '1') then
          state <= START; 
   end if;
   when START =>
   if (time_counter = BIT_TIMER - 1) then
        time_counter <= HALF_TIMER;
        state <= Rx_DATA;
   else
        time_counter <= time_counter + 1;
   end if;
   when Rx_DATA => S_DATA(bit_counter) <= Rx_in ;
   if (time_counter = HALF_TIMER + BIT_TIMER - 1) then
        time_counter <= HALF_TIMER;  
        bit_counter <= bit_counter + 1;
   if bit_counter = 7 then
        bit_counter <= 0; 
        state <= STOP;
   end if;
   else
        time_counter <= time_counter + 1;
   end if;
   when STOP =>
   if (time_counter = HALF_TIMER + BIT_TIMER - 1) then
        time_counter <= 0;
        state <= SLEEP;
   else
        time_counter <= time_counter + 1;
   end if;
   end case;
   end if;
   end process;
   Rout_DATA <= S_DATA;
   Rx_busy <= '1' when (state /= SLEEP) else '0';
end HAS;
 